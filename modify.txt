def get_image_path(json_dir, image_base):
    # Filter only image files with the same base name as the JSON file
    image_files = [
        f for f in os.listdir(json_dir)
        if f.startswith(image_base) and f.lower().endswith(('.jpg', '.jpeg', '.png', '.gif'))
    ]
    
    if not image_files:
        raise FileNotFoundError(f"No image file found for the base name '{image_base}' in '{json_dir}'.")

    # Assuming there's only one image corresponding to the JSON file
    return os.path.join(json_dir, image_files[0])




# In your main function, call this like:
json_dir = os.path.dirname(json_path)  # Get the directory from the JSON path
image_base = shapes[0]['imagePath'][:-4]  # Remove the extension from imagePath
image_path = get_image_path(json_dir, image_base)






def fill_inner_rectangle(image, inner_rect, color, blur_strength=5):
    x1, y1 = inner_rect[0]
    x2, y2 = inner_rect[1]
    
    # Create a mask with the same size as the image, initialized to zeros (black)
    mask = np.zeros_like(image)

    # Fill the inner rectangle with the color in the mask
    mask[y1:y2, x1:x2] = color

    # Apply Gaussian Blur to the mask for smoother edges
    blurred_mask = cv2.GaussianBlur(mask, (blur_strength, blur_strength), 0)

    # Blend the blurred mask with the original image using addWeighted
    blended_image = cv2.addWeighted(image, 1.0, blurred_mask, 0.5, 0)

    return blended_image











def fill_inner_rectangle(image, inner_rect, color, blur_strength=5):
    x1, y1 = inner_rect[0]
    x2, y2 = inner_rect[1]
    
    # Create a copy of the original image to avoid modifying it directly
    image_copy = image.copy()

    # Fill the inner rectangle area with the specified color
    image_copy[y1:y2, x1:x2] = color

    # Create a mask for the inner rectangle
    mask = np.zeros_like(image_copy, dtype=np.uint8)
    mask[y1:y2, x1:x2] = color

    # Apply Gaussian Blur only to the filled rectangle area
    blurred_area = cv2.GaussianBlur(image_copy[y1:y2, x1:x2], (blur_strength, blur_strength), 0)

    # Replace the rectangle area in the original image with the blurred area
    image[y1:y2, x1:x2] = blurred_area

    return image



def fill_inner_rectangle(image, inner_rect, color, blur_strength=5, padding=10):
    x1, y1 = inner_rect[0]
    x2, y2 = inner_rect[1]
    
    # Create a copy of the original image to avoid modifying it directly
    image_copy = image.copy()

    # Fill the inner rectangle area with the specified color
    image_copy[y1:y2, x1:x2] = color

    # Create a mask for the inner rectangle
    mask = np.zeros_like(image_copy, dtype=np.uint8)
    mask[y1:y2, x1:x2] = color

    # Define the padded rectangle area for blurring
    padded_x1 = max(0, x1 - padding)
    padded_y1 = max(0, y1 - padding)
    padded_x2 = min(image.shape[1], x2 + padding)
    padded_y2 = min(image.shape[0], y2 + padding)

    # Extract the area to blur
    blur_area = image_copy[padded_y1:padded_y2, padded_x1:padded_x2]

    # Apply Gaussian Blur only to the padded area
    blurred_area = cv2.GaussianBlur(blur_area, (blur_strength, blur_strength), 0)

    # Replace the corresponding area in the original image with the blurred area
    image[padded_y1:padded_y2, padded_x1:padded_x2] = blurred_area

    return image

