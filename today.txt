import cv2
import numpy as np
import json

# Function to enlarge the rectangle by a specified amount
def enlarge_rectangle(points, enlargement_size, img_shape):
    x1, y1 = points[0]
    x2, y2 = points[1]
    
    # Ensure that enlargement stays within image bounds
    x1 = max(0, x1 - enlargement_size)
    y1 = max(0, y1 - enlargement_size)
    x2 = min(img_shape[1], x2 + enlargement_size)
    y2 = min(img_shape[0], y2 + enlargement_size)
    
    return [(int(x1), int(y1)), (int(x2), int(y2))]

# Function to create the outer rectangle around the enlarged one
def create_outer_rectangle(inner_rect, padding, img_shape):
    x1, y1 = inner_rect[0]
    x2, y2 = inner_rect[1]
    
    # Create an outer rectangle with the specified padding
    outer_x1 = max(0, x1 - padding)
    outer_y1 = max(0, y1 - padding)
    outer_x2 = min(img_shape[1], x2 + padding)
    outer_y2 = min(img_shape[0], y2 + padding)
    
    return [(outer_x1, outer_y1), (outer_x2, outer_y2)]

# Function to get the most frequent color from the outer rectangle
def get_most_frequent_color(image, outer_rect, inner_rect):
    outer_x1, outer_y1 = outer_rect[0]
    outer_x2, outer_y2 = outer_rect[1]
    
    inner_x1, inner_y1 = inner_rect[0]
    inner_x2, inner_y2 = inner_rect[1]
    
    # Mask the inner rectangle to exclude it from the outer rectangle area
    outer_area = np.copy(image[outer_y1:outer_y2, outer_x1:outer_x2])
    outer_area[inner_y1-outer_y1:inner_y2-outer_y1, inner_x1-outer_x1:inner_x2-outer_x1] = 0

    # Reshape to a list of pixels
    outer_pixels = outer_area.reshape(-1, outer_area.shape[-1])
    outer_pixels = outer_pixels[np.any(outer_pixels != [0, 0, 0], axis=-1)]  # Remove masked pixels
    
    # Find the most frequent color
    unique, counts = np.unique(outer_pixels, axis=0, return_counts=True)
    most_frequent_color = unique[np.argmax(counts)]
    
    return most_frequent_color

# Function to fill the inner rectangle with the most frequent color from the outer boundary
def fill_inner_rectangle(image, inner_rect, color):
    x1, y1 = inner_rect[0]
    x2, y2 = inner_rect[1]
    
    # Fill the inner rectangle with the color
    image[y1:y2, x1:x2] = color
    return image

# Main function to process the image
def process_image(image_path, json_path, enlargement_size=5, outer_padding=20):
    # Load the image
    image = cv2.imread(image_path)
    img_shape = image.shape

    # Load the JSON file with rectangle coordinates
    with open(json_path, 'r') as f:
        shapes = json.load(f)['shapes']

    for shape in shapes:
        # Extract the original rectangle coordinates
        rect_coords = [(shape['points'][0][0], shape['points'][0][1]), 
                       (shape['points'][1][0], shape['points'][1][1])]
        
        # Enlarge the rectangle to account for borders and shadows
        enlarged_rect = enlarge_rectangle(rect_coords, enlargement_size, img_shape)
        
        # Create the outer rectangle at a certain padding distance
        outer_rect = create_outer_rectangle(enlarged_rect, outer_padding, img_shape)
        
        # Get the most frequent color from the outer rectangle
        most_frequent_color = get_most_frequent_color(image, outer_rect, enlarged_rect)
        
        # Fill the inner enlarged rectangle with the most frequent boundary color
        image = fill_inner_rectangle(image, enlarged_rect, most_frequent_color)

    return image

# Script execution
if __name__ == "__main__":
    image_path = 'screenshot001.jpg'  # Path to your image file
    json_path = 'rectangles.json'  # Path to your JSON file

    # Process the image with rectangles filled
    result_image = process_image(image_path, json_path)

    # Save the result image to check output
    cv2.imwrite("result_image.png", result_image)
